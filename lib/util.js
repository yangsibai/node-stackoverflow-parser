// Generated by CoffeeScript 1.7.1
(function() {
  var request,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require("request");

  exports.isStackoverflowQuestion = function(url) {
    var pattern;
    pattern = /stackoverflow.com\/questions\/\d+/i;
    return pattern.test(url);
  };


  /*
      download page
   */

  exports.download = function(url, cb) {
    return request(url, function(err, response, body) {
      if (err) {
        return cb(err);
      } else if (response.statusCode !== 200) {
        return cb(new Error("http error,code:" + response.statusCode));
      } else {
        return cb(null, body.toString());
      }
    });
  };


  /*
      remove attributes
      @param {Object} node
   */

  exports.trimAttrs = function(node) {
    var all, attr, n, proAttrs, _i, _len, _results;
    all = node.find("*");
    _results = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      n = all[_i];
      proAttrs = ['srv'];
      if (n.name !== "object" && n.name !== "embed") {
        proAttrs.push('href');
        proAttrs.push('width');
      }
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = n.attribs;
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          attr = _ref[_j];
          if (__indexOf.call(proAttrs, attr) < 0) {
            _results1.push($(n).removeAttr(attr));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };


  /*
      replace relative path with real path
      @param {Object} node
      @param {String} baseUrl
   */

  exports.pullOutRealPath = function(node, baseUrl) {
    var imgs, links;
    if (baseUrl) {
      imgs = node.find('img');
      imgs.each(function(i, img) {
        var realPath;
        realPath = img.attribs['src'];
        _.each(img.attribs, function(value, key) {
          if (_isUrl(value) && (value !== realPath || (!realPath))) {
            return realPath = value;
          }
        });
        return img.attribs['src'] = _isUrl(realPath) ? realPath : url.resolve(baseUrl, realPath);
      });
      links = node.find('a');
      return links.each(function(i, link) {
        if (link.attribs['href']) {
          return link.attribs['href'] = url.resolve(baseUrl, link.attribs['href']);
        }
      });
    }
  };


  /*
      get author info
   */

  exports.getAuthor = function(info) {
    var arr;
    arr = info.split("ï¼Œ");
    return {
      name: arr[0],
      about: arr[1] || ""
    };
  };

}).call(this);

//# sourceMappingURL=util.map
